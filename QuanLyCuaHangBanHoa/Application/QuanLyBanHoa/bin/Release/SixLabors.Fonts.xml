<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SixLabors.Fonts</name>
    </assembly>
    <members>
        <member name="T:SixLabors.Fonts.BinaryReader">
            <summary>
            BinaryReader using bigendian encoding.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.BinaryReader.buffer">
            <summary>
            Buffer used for temporary storage before conversion into primitives
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.BinaryReader" /> class.
            Constructs a new binary reader with the given bit converter, reading
            to the given stream, using the given encoding.
            </summary>
            <param name="stream">Stream to read data from</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
        </member>
        <member name="P:SixLabors.Fonts.BinaryReader.BaseStream">
            <summary>
            Gets the underlying stream of the EndianBinaryReader.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Close">
            <summary>
            Closes the reader, including the underlying stream.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation.</param>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Seek(SixLabors.Fonts.Tables.TableHeader)">
            <summary>
            Seeks within the stream.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadSByte">
            <summary>
            Reads a single signed byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadBoolean">
            <summary>
            Reads a boolean from the stream. 1 byte is read.
            </summary>
            <returns>The boolean read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer from the stream, using the bit converter
            for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadFixed">
            <summary>
            Reads a 32-bit signed integer from the stream
            4 bytes are read.
            </summary>
            <returns>The 32-bit integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer from the stream.
            8 bytes are read.
            </summary>
            <returns>The 64-bit integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the stream.
            2 bytes are read.
            </summary>
            <returns>The 16-bit unsigned integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt16Array(System.Int32)">
            <summary>
            Reads array or 16-bit unsigned integers from the stream.
            2 bytes are read.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt32Array(System.Int32)">
            <summary>
            Reads array or 16-bit unsigned integers from the stream.
            2 bytes are read.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Offset16Array(System.Int32)">
            <summary>
            Reads array or 16-bit unsigned integers from the stream.
            2 bytes are read.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Offset32Array(System.Int32)">
            <summary>
            Reads array or 16-bit unsigned integers from the stream.
            2 bytes are read.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadInt16Array(System.Int32)">
            <summary>
            Reads a 16-bit unsigned integer from the stream, using the bit converter
            for this reader. 2 bytes are read.
            </summary>
            <param name="length">The length.</param>
            <returns>
            The 16-bit unsigned integer read
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt8">
            <summary>
            Reads a 8-bit unsigned integer from the stream, using the bit converter
            for this reader. 1 bytes are read.
            </summary>
            <returns>The 8-bit unsigned integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the stream, using the bit converter
            for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit unsigned integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer from the stream.
            8 bytes are read.
            </summary>
            <returns>The 64-bit unsigned integer read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadSingle">
            <summary>
            Reads a single-precision floating-point value from the stream.
            4 bytes are read.
            </summary>
            <returns>The floating point value read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes into the given buffer, starting at
            the given index.
            </summary>
            <param name="buffer">The buffer to copy data into</param>
            <param name="index">The first index to copy data into</param>
            <param name="count">The number of bytes to read</param>
            <returns>The number of bytes actually read. This will only be less than
            the requested number of bytes if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes, returning them in a new byte array.
            If not enough bytes are available before the end of the stream, this
            method will return what is available.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string of a specific length, which specifies the number of bytes
            to read from the stream. These bytes are then converted into a string with
            the encoding for this reader.
            </summary>
            <param name="bytesToRead">The bytes to read.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The string read from the stream.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadTag">
            <summary>
            Reads the uint32 string.
            </summary>
            <returns>a 4 character long UTF8 encoded string</returns>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.ReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream, throwing an exception
            if they can't all be read.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.TryReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream if possible, returning
            the number of bytes actually read, which may be less than requested if
            (and only if) the end of the stream is reached.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="T:SixLabors.Fonts.BinaryReader.CastTo`1">
            <summary>
            Class to cast to type <typeparamref name="TTarget"/>
            </summary>
            <typeparam name="TTarget">Target type</typeparam>
        </member>
        <member name="M:SixLabors.Fonts.BinaryReader.CastTo`1.From``1(``0)">
            <summary>
            Casts <typeparamref name="TSource" /> to <typeparamref name="TTarget" />.
            This does not cause boxing for value types.
            Useful in generic methods.
            </summary>
            <typeparam name="TSource">Source type to cast from. Usually a generic type.</typeparam>
            <param name="s">The s.</param>
        </member>
        <member name="T:SixLabors.Fonts.ColorFontSupport">
            <summary>
            Options for enabling color font support during layout and rendering.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.ColorFontSupport.None">
            <summary>
            Don't try rendering color glyphs at all
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.ColorFontSupport.MicrosoftColrFormat">
            <summary>
            Render using glyphs accessed via Micropsfts COLR/CPAL table extensions to OpenType
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.FontException">
            <summary>
            Base class for exceptions thrown by this library.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.FontException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.FontException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException">
            <summary>
            Execption for detailing missing font familys.
            </summary>
            <seealso cref="T:SixLabors.Fonts.Exceptions.FontException" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException"/> class.
            </summary>
            <param name="family">The name of the missing font family.</param>
        </member>
        <member name="P:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException.FontFamily">
            <summary>
            Gets the name of the font familiy we failed to find.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.FontsThrowHelper">
            <summary>
            Helper methods to throw exceptions
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.FontsThrowHelper.ThrowGlyphMissingException``1(System.Int32)">
            <summary>
            Throws an <see cref="T:SixLabors.Fonts.Exceptions.GlyphMissingException"/>.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.GlyphMissingException">
            <summary>
            Execption for detailing missing font familys.
            </summary>
            <seealso cref="T:SixLabors.Fonts.Exceptions.FontException" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.GlyphMissingException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.GlyphMissingException"/> class.
            </summary>
            <param name="codePoint">The code point for the glyph we where unable to find.</param>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.InvalidFontFileException">
            <summary>
            Exception font loading can throw if it encounteres invalid data during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.InvalidFontFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.InvalidFontFileException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.InvalidFontTableException">
            <summary>
            Exception font loading can throw if it encounteres invalid data during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.InvalidFontTableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.InvalidFontTableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Exceptions.InvalidFontTableException.Table">
            <summary>
            Gets the table where the error originated.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Exceptions.MissingFontTableException">
            <summary>
            Exception font loading can throw if it finds a required table is missing during font loading.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:SixLabors.Fonts.Exceptions.MissingFontTableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Exceptions.MissingFontTableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:SixLabors.Fonts.Exceptions.MissingFontTableException.Table">
            <summary>
            Gets the table where the error originated.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.FileFontInstance">
            <summary>
            provide metadata about a font.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FileFontInstance.LoadFontCollection(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.Font">
            <summary>
            Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.FontFamily,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="family">The family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.FontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="family">The family.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.Font.#ctor(SixLabors.Fonts.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.Font"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:SixLabors.Fonts.Font.RequestedStyle">
            <summary>
            Gets the family.
            </summary>
            <value>
            The family.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Family">
            <summary>
            Gets the family.
            </summary>
            <value>
            The family.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Bold">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.Font"/> is bold.
            </summary>
            <value>
              <c>true</c> if bold; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Italic">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.Font"/> is italic.
            </summary>
            <value>
              <c>true</c> if italic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.EmSize">
            <summary>
            Gets the size of the em.
            </summary>
            <value>
            The size of the em.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.Font.Ascender">
            <summary>
            Gets the ascender (from the OS/2 table field <c>TypoAscender</c>).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.Descender">
            <summary>
            Gets the descender (from the OS/2 table field <c>TypoDescender</c>).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.LineGap">
            <summary>
            Gets the line gap (from the OS/2 table field <c>TypoLineGap</c>).
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.LineHeight">
            <summary>
            Gets the line height.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Font.Instance">
            <summary>
            Gets the font instance.
            </summary>
            <value>
            The font instance.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Font.GetGlyph(System.Int32)">
            <summary>
            Gets the glyph.
            </summary>
            <param name="codePoint">The code point of the character.</param>
            <returns>Returns the glyph</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontCollection">
            <summary>
            Provides a collection of fonts.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontCollection"/> class.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontCollection.Families">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.FamiliesByCulture(System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.String)">
            <summary>
            Installs a font from the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.String,SixLabors.Fonts.FontDescription@)">
            <summary>
            Installs a font from the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="fontDescription">The font description of the installed font.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.IO.Stream)">
            <summary>
            Installs the specified font stream.
            </summary>
            <param name="fontStream">The font stream.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.IO.Stream,SixLabors.Fonts.FontDescription@)">
            <summary>
            Installs the specified font stream.
            </summary>
            <param name="fontStream">The font stream.</param>
            <param name="fontDescription">The font description of the installed font.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.String)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionPath">The font collection path (should be typically a .ttc file like simsun.ttc).</param>
            <returns>The font descriptions of the installed fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.String,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionPath">The font collection path (should be typically a .ttc file like simsun.ttc).</param>
            <param name="fontDescriptions">The descriptions of fonts installed from the collection.</param>
            <returns>The font descriptions of the installed fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.IO.Stream,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionStream">The font stream.</param>
            <param name="fontDescriptions">The descriptions of fonts installed from the collection.</param>
            <returns>The font descriptions of the installed fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.String,System.Globalization.CultureInfo)">
            <summary>
            Installs a font from the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="culture">The culture of the retuend font family</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <summary>
            Installs a font from the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="culture">The culture of the retuend font family</param>
            <param name="fontDescription">The font description of the installed font.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Installs the specified font stream.
            </summary>
            <param name="fontStream">The font stream.</param>
            <param name="culture">The culture of the retuend font family</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Install(System.IO.Stream,System.Globalization.CultureInfo,SixLabors.Fonts.FontDescription@)">
            <summary>
            Installs the specified font stream.
            </summary>
            <param name="fontStream">The font stream.</param>
            <param name="culture">The culture of the retuend font family</param>
            <param name="fontDescription">The font description of the installed font.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.String,System.Globalization.CultureInfo)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionPath">The font collection path (should be typically a .ttc file like simsun.ttc).</param>
            <returns>The font descriptions of the installed fonts.</returns>
            <param name="culture">The culture of the retuend font families</param>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionPath">The font collection path (should be typically a .ttc file like simsun.ttc).</param>
            <param name="culture">The culture of the retuend font families</param>
            <param name="fontDescriptions">The descriptions of fonts installed from the collection.</param>
            <returns>The font descriptions of the installed fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.InstallCollection(System.IO.Stream,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{SixLabors.Fonts.FontDescription}@)">
            <summary>
            Installs a true type font collection (.ttc) from the specified font collection stream.
            </summary>
            <param name="fontCollectionStream">The font stream.</param>
            <param name="culture">The culture of the retuend font families</param>
            <param name="fontDescriptions">The descriptions of fonts installed from the collection.</param>
            <returns>The font descriptions of the installed fonts.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Find(System.String,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.TryFind(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.Find(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontCollection.TryFind(System.String,SixLabors.Fonts.FontFamily@)">
            <inheritdoc />
        </member>
        <member name="T:SixLabors.Fonts.FontDescription">
            <summary>
            provide metadata about a font.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.#ctor(SixLabors.Fonts.Tables.General.NameTable,SixLabors.Fonts.Tables.General.OS2Table,SixLabors.Fonts.Tables.General.HeadTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontDescription" /> class.
            </summary>
            <param name="nameTable">The name table.</param>
            <param name="os2">The os2.</param>
            <param name="head">The head.</param>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.Style">
            <summary>
            Gets the style.
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontNameInvariantCulture">
            <summary>
            Gets the name of the font in the invariant culture.
            </summary>
            <returns>The font name</returns>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontFamilyInvariantCulture">
            <summary>
            Gets the name of the font family in the invariant culture.
            </summary>
            <returns>The font name</returns>
        </member>
        <member name="P:SixLabors.Fonts.FontDescription.FontSubFamilyNameInvariantCulture">
            <summary>
            Gets the font sub family in the invariant culture.
            </summary>
            <returns>The font sub family name</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font name</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontFamily(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font family .
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font family name</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.FontSubFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the font sub family.
            </summary>
            <param name="culture">The culture to load metadata in.</param>
            <returns>The font sub family name</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadDescription(SixLabors.Fonts.FontReader)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontDescription" /> from the specified stream.
            </summary>
            <param name="reader">The reader.</param>
            <returns>
            a <see cref="T:SixLabors.Fonts.FontDescription" />.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadFontCollectionDescriptions(System.String)">
            <summary>
            Reads all the <see cref="T:SixLabors.Fonts.FontDescription"/>s from the file at the specified path (typically a .ttc file like simsun.ttc).
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontDescription.LoadFontCollectionDescriptions(System.IO.Stream)">
            <summary>
            Reads all the <see cref="T:SixLabors.Fonts.FontDescription"/>s from the specified stream (typically a .ttc file like simsun.ttc).
            </summary>
            <param name="stream">The stream to read the font collection from.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontDescription"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontFamily">
            <summary>
            Defines a group of type faces having a similar basic design and certain variations in styles. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.#ctor(System.String,SixLabors.Fonts.FontCollection,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontFamily"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="collection">The collection.</param>
            <param name="culture">The culture the family was extracted against</param>
        </member>
        <member name="P:SixLabors.Fonts.FontFamily.Name">
            <summary>
            Gets the name of the <see cref="T:SixLabors.Fonts.FontFamily"/>.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.FontFamily.Culture">
            <summary>
            Gets the culture this <see cref="T:SixLabors.Fonts.FontFamily"/> was created against.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.FontFamily.AvailableStyles">
            <summary>
            Gets the available <see cref="T:SixLabors.Fonts.FontStyle"/> that are currently available.
            </summary>
            <value>
            The available styles.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.op_Equality(SixLabors.Fonts.FontFamily,SixLabors.Fonts.FontFamily)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontFamily"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontFamily"/> on the right side of the operand.</param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.op_Inequality(SixLabors.Fonts.FontFamily,SixLabors.Fonts.FontFamily)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontRectangle"/> objects for inequality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the right side of the operand.</param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.IsStyleAvailable(SixLabors.Fonts.FontStyle)">
            <summary>
            Determines whether the specified <see cref="T:SixLabors.Fonts.FontStyle"/> is available.
            </summary>
            <param name="style">The style.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SixLabors.Fonts.FontStyle"/> is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SixLabors.Fonts.FontFamily.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SixLabors.Fonts.FontFamilyCollectionExtensions">
            <summary>
            A readonly collection of fonts.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontFamilyCollectionExtensions.CreateFont(SixLabors.Fonts.FontFamily,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <returns>Returns instance of the <see cref="T:SixLabors.Fonts.Font"/> from the current collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontFamilyCollectionExtensions.CreateFont(SixLabors.Fonts.FontFamily,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <returns>Returns instance of the <see cref="T:SixLabors.Fonts.Font"/> from the current collection.</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontInstance">
            <summary>
            provide metadata about a font.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.#ctor(SixLabors.Fonts.Tables.General.NameTable,SixLabors.Fonts.Tables.General.CMapTable,SixLabors.Fonts.Tables.General.GlyphTable,SixLabors.Fonts.Tables.General.OS2Table,SixLabors.Fonts.Tables.General.HorizontalMetricsTable,SixLabors.Fonts.Tables.General.HeadTable,SixLabors.Fonts.Tables.General.KerningTable,SixLabors.Fonts.Tables.General.ColrTable,SixLabors.Fonts.Tables.General.CpalTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontInstance"/> class.
            </summary>
            <param name="nameTable">The name table.</param>
            <param name="cmap">The cmap.</param>
            <param name="glyphs">The glyphs.</param>
            <param name="os2">The os2.</param>
            <param name="horizontalMetrics">The horizontal metrics.</param>
            <param name="head">The head.</param>
            <param name="kern">The kern.</param>
            <param name="colrTable">The COLR table</param>
            <param name="cpalTable">The CPAL table</param>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
            <value>
            The height of the line.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.Ascender">
            <summary>
            Gets the ascender.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.Descender">
            <summary>
            Gets the descender.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.LineGap">
            <summary>
            Gets the line gap.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.EmSize">
            <summary>
            Gets the size of the em.
            </summary>
            <value>
            The size of the em.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.FontInstance.Description">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.SixLabors#Fonts#IFontInstance#GetGlyph(System.Int32)">
            <summary>
            Gets the glyph.
            </summary>
            <param name="codePoint">The code point of the character.</param>
            <returns>the glyph for a known character.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.SixLabors#Fonts#IFontInstance#GetOffset(SixLabors.Fonts.GlyphInstance,SixLabors.Fonts.GlyphInstance)">
            <summary>
            Gets the amount the <paramref name="glyph"/> should be ofset if it was proceeded by the <paramref name="previousGlyph"/>.
            </summary>
            <param name="glyph">The glyph.</param>
            <param name="previousGlyph">The previous glyph.</param>
            <returns>A <see cref="T:System.Numerics.Vector2"/> represting the offset that should be applied to the <paramref name="glyph"/>. </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.LoadFont(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.LoadFont(System.String,System.Int64)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <param name="offset">Position in the stream to read the font from.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.LoadFont(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.LoadFontCollection(System.String)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="path">The file path.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontInstance.LoadFontCollection(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SixLabors.Fonts.FontInstance"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>a <see cref="T:SixLabors.Fonts.FontInstance"/>.</returns>
        </member>
        <member name="T:SixLabors.Fonts.FontRectangle">
            <summary>
            Stores a set of four single precision floating points that represent the location and size of a rectangle.
            </summary>
            <remarks>
            This struct is fully mutable. This is done (against the guidelines) for the sake of performance,
            as it avoids the need to create new values for modification operations.
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.FontRectangle.Empty">
            <summary>
            Represents a <see cref="T:SixLabors.Fonts.FontRectangle"/> that has X, Y, Width, and Height values set to zero.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontRectangle"/> struct.
            </summary>
            <param name="x">The horizontal position of the rectangle.</param>
            <param name="y">The vertical position of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.FontRectangle"/> struct.
            </summary>
            <param name="point">
            The <see cref="T:System.Numerics.Vector2"/> which specifies the rectangles point in a two-dimensional plane.
            </param>
            <param name="size">
            The <see cref="T:System.Numerics.Vector2"/> which specifies the rectangles height and width.
            </param>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Width">
            <summary>
            Gets the width of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Height">
            <summary>
            Gets the height of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Location">
            <summary>
            Gets the coordinates of the upper-left corner of the rectangular region represented by this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Size">
            <summary>
            Gets the size of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SixLabors.Fonts.FontRectangle"/> is empty.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Right">
            <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.FontRectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.op_Equality(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontRectangle"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the right side of the operand.</param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.op_Inequality(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.FontRectangle"/> objects for inequality.
            </summary>
            <param name="left">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:SixLabors.Fonts.FontRectangle"/> on the right side of the operand.</param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:SixLabors.Fonts.FontRectangle"/> with the specified location and size. </summary>
            <param name="left">The left coordinate of the rectangle.</param>
            <param name="top">The top coordinate of the rectangle.</param>
            <param name="right">The right coordinate of the rectangle.</param>
            <param name="bottom">The bottom coordinate of the rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Center(SixLabors.Fonts.FontRectangle)">
            <summary>
            Returns the center point of the given <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Intersect(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a rectangle that represents the intersection between <paramref name="a"/> and
            <paramref name="b"/>. If there is no intersection, an empty rectangle is returned.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(SixLabors.Fonts.FontRectangle,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:SixLabors.Fonts.FontRectangle"/> that is inflated by the specified amount.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="x">The amount to inflate the width by.</param>
            <param name="y">The amount to inflate the height by.</param>
            <returns>A new <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Transform(SixLabors.Fonts.FontRectangle,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a rectangle by the given matrix.
            </summary>
            <param name="rectangle">The source rectangle.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>A transformed <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Union(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a rectangle that represents the union between <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The <see cref="T:SixLabors.Fonts.FontRectangle"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstructs this rectangle into four floats.
            </summary>
            <param name="x">The out value for X.</param>
            <param name="y">The out value for Y.</param>
            <param name="width">The out value for the width.</param>
            <param name="height">The out value for the height.</param>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Intersect(SixLabors.Fonts.FontRectangle)">
            <summary>
            Creates a FontRectangle that represents the intersection between this FontRectangle and the <paramref name="rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the intersections between the two rectrangles.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this <see cref="T:SixLabors.Fonts.FontRectangle"/> by the specified amount.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectrangle</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Inflate(System.Numerics.Vector2)">
            <summary>
            Inflates this <see cref="T:SixLabors.Fonts.FontRectangle"/> by the specified amount.
            </summary>
            <param name="size">The size.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectrangle</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specfied point is contained within the rectangular region defined by
            this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="x">The x-coordinate of the given point.</param>
            <param name="y">The y-coordinate of the given point.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(System.Numerics.Vector2)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this <see cref="T:SixLabors.Fonts.FontRectangle"/> .
            </summary>
            <param name="point">The point.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Contains(SixLabors.Fonts.FontRectangle)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rectangle"/> is entirely contained
            within the rectangular region represented by this <see cref="T:SixLabors.Fonts.FontRectangle"/> .
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.IntersectsWith(SixLabors.Fonts.FontRectangle)">
            <summary>
            Determines if the specfied <see cref="T:SixLabors.Fonts.FontRectangle"/> intersects the rectangular region defined by
            this <see cref="T:SixLabors.Fonts.FontRectangle"/>.
            </summary>
            <param name="rectangle">The other Rectange. </param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Offset(System.Numerics.Vector2)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="point">The point.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the offset rectrangle.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="dx">The amount to offset the x-coordinate.</param>
            <param name="dy">The amount to offset the y-coordinate.</param>
            <returns>New <see cref="T:SixLabors.Fonts.FontRectangle"/> representing the inflated rectrangle.</returns>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.FontRectangle.Equals(SixLabors.Fonts.FontRectangle)">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.FontStyle">
            <summary>
            The font styles
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.FontStyle.BoldItalic">
            <summary>
            Bold and Italic
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.Glyph">
            <summary>
            A glyph from a particular font face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Glyph.Instance">
            <summary>
            Gets the glyph instance.
            </summary>
            <value>
            The glyph instance.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Glyph.BoundingBox(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Calculates the bounding box
            </summary>
            <param name="location">location to calualte from.</param>
            <param name="dpi">dpi to calualtes in relation to</param>
            <returns>The bounding box</returns>
        </member>
        <member name="M:SixLabors.Fonts.Glyph.RenderTo(SixLabors.Fonts.IGlyphRenderer,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Renders to.
            </summary>
            <param name="surface">The surface.</param>
            <param name="location">The location.</param>
            <param name="dpi">The dpi.</param>
            <param name="lineHeight">The line height.</param>
        </member>
        <member name="M:SixLabors.Fonts.Glyph.RenderTo(SixLabors.Fonts.IGlyphRenderer,System.Numerics.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Renders the glyph to the render surface in font units relative to a bottom left origin at (0,0)
            </summary>
            <param name="surface">The surface.</param>
            <param name="location">The location.</param>
            <param name="dpiX">The dpi along the X axis.</param>
            <param name="dpiY">The dpi along the Y axis.</param>
            <param name="lineHeight">The line height.</param>
            <exception cref="T:System.NotSupportedException">Too many control points</exception>
        </member>
        <member name="T:SixLabors.Fonts.GlyphInstance">
            <summary>
            A glyph from a particular font face.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.Font">
            <summary>
            Gets the Font.
            </summary>
            <value>
            The Font.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.Bounds">
            <summary>
            Gets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.AdvanceWidth">
            <summary>
            Gets the width of the advance.
            </summary>
            <value>
            The width of the advance.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.GlyphType">
            <summary>
            Gets a value indicating the type of glyph instance this is.
            </summary>
            <value>
            The type of this glyph
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.GlyphColor">
            <summary>
            Gets the color of this glyph
            </summary>
            <value>
            The color of the glyph when the <see cref="P:SixLabors.Fonts.GlyphInstance.GlyphType"/> is <see cref="F:SixLabors.Fonts.GlyphType.ColrLayer"/>
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.Index">
            <summary>
            Gets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.SizeOfEm">
            <summary>
            Gets the size of the EM
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.ControlPoints">
            <summary>
            Gets the points defining the shape of this glyph
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.OnCurves">
            <summary>
            Gets wether or not the corresponding control point is on a curve
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.EndPoints">
            <summary>
            Gets the end points
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.LeftSideBearing">
            <summary>
            Gets the distance from the bounding box start
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphInstance.ScaleFactor">
            <summary>
            Gets the scale factor that is applied to the glyph
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphInstance.RenderTo(SixLabors.Fonts.IGlyphRenderer,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Renders the glyph to the render surface in font units relative to a bottom left origin at (0,0)
            </summary>
            <param name="surface">The surface.</param>
            <param name="pointSize">Size of the point.</param>
            <param name="location">The location.</param>
            <param name="dpi">The dpi.</param>
            <param name="lineHeight">The lineHeight the current glyph was draw agains to offset topLeft while calling out to IGlyphRenderer.</param>
            <exception cref="T:System.NotSupportedException">Too many control points</exception>
        </member>
        <member name="T:SixLabors.Fonts.GlyphLayout">
            <summary>
            A glyphs layout and location
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.IsWhiteSpace">
            <summary>
            Gets a value indicating whether gets the glyphe represents a whitespace character.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Glyph">
            <summary>
            Gets the glyph.
            </summary>
            <value>
            The glyph.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Location">
            <summary>
            Gets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.StartOfLine">
            <summary>
            Gets a value indicating whether this glyph is the first glyph on a new line.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphLayout.CodePoint">
            <summary>
            Gets the Unicode code point of the character.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.GlyphMetric">
            <summary>
            Represents a <see cref="T:SixLabors.Fonts.Glyph"/> metric.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetric.#ctor(System.Int32,SixLabors.Fonts.FontRectangle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.GlyphMetric"/> struct.
            </summary>
            <param name="codePoint">Unicode codepoint of the character.</param>
            <param name="bounds">The bounds.</param>
            <param name="isControlCharacter">Whether the character is a control character.</param>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetric.Codepoint">
            <summary>
            Gets the Unicode codepoint of the character.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetric.Character">
            <summary>
            Gets the UTF-16 encoded character.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetric.Bounds">
            <summary>
            Gets the character bounds.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphMetric.IsControlCharacter">
            <summary>
            Gets a value indicating whether the character is a control character.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphMetric.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.GlyphRendererParameters">
            <summary>
            The combined set of properties that uniquely identify the glyph that is to be rendered
            at a particular size and dpi.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.Font">
            <summary>
            Gets the name of the Font this glyph belongs to.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphColor">
            <summary>
            Gets the type of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphType">
            <summary>
            Gets the type of this glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.FontStyle">
            <summary>
            Gets the style of the Font this glyph belongs to.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.GlyphIndex">
            <summary>
            Gets the index of the glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.PointSize">
            <summary>
            Gets the rendered point size.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.DpiX">
            <summary>
            Gets the dpi along the X axis we are rendering at.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphRendererParameters.DpiY">
            <summary>
            Gets the dpi along the Y axis we are rendering at.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.op_Equality(SixLabors.Fonts.GlyphRendererParameters,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> objects for equality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.op_Inequality(SixLabors.Fonts.GlyphRendererParameters,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> objects for inequality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphRendererParameters"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.Equals(SixLabors.Fonts.GlyphRendererParameters)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphRendererParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.GlyphType">
            <summary>
            Represents the various version of a glyph records.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.Fallback">
            <summary>
            This is a fall back glyph due to a missing code point.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.Standard">
            <summary>
            This is a standard glyph to be drawn in the style the user defines.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.GlyphType.ColrLayer">
            <summary>
            This is a single layer of the multi-layer colored glyph (emoji).
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.HorizontalAlignment">
            <summary>
            Horizontal alignment modes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Left">
            <summary>
            Aligns text from the left.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Right">
            <summary>
            Aligns text from the right.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.HorizontalAlignment.Center">
            <summary>
            Aligns text from the center.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.IColorGlyphRenderer">
            <summary>
            A surface that can have a glyph rendered to it as a series of actions, where the engine support colored glyphs (emoji).
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IColorGlyphRenderer.SetColor(SixLabors.Fonts.GlyphColor)">
            <summary>
            Sets the color to use for the current glyph.
            </summary>
            <param name="color">The color to override the renders brush with.</param>
        </member>
        <member name="T:SixLabors.Fonts.GlyphColor">
            <summary>
            Provides access to the the color details for the current glyph.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Blue">
            <summary>
            Gets the blue component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Green">
            <summary>
            Gets the green component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Red">
            <summary>
            Gets the red component
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.GlyphColor.Alpha">
            <summary>
            Gets the alpha component
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.op_Equality(SixLabors.Fonts.GlyphColor,SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphColor"/> objects for equality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.op_Inequality(SixLabors.Fonts.GlyphColor,SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares two <see cref="T:SixLabors.Fonts.GlyphColor"/> objects for inequality.
            </summary>
            <param name="left">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the left side of the operand.
            </param>
            <param name="right">
            The <see cref="T:SixLabors.Fonts.GlyphColor"/> on the right side of the operand.
            </param>
            <returns>
            True if the current left is unequal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.Equals(SixLabors.Fonts.GlyphColor)">
            <summary>
            Compares the  <see cref="T:SixLabors.Fonts.GlyphColor"/> for equality to this color.
            </summary>
            <param name="other">
            The other <see cref="T:SixLabors.Fonts.GlyphColor"/> to compair to.
            </param>
            <returns>
            True if the current color is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SixLabors.Fonts.GlyphColor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.IFontCollection">
            <summary>
            A readable and writable collection of fonts.
            </summary>
            <seealso cref="T:SixLabors.Fonts.IReadOnlyFontCollection" />
        </member>
        <member name="M:SixLabors.Fonts.IFontCollection.Install(System.IO.Stream)">
            <summary>
            Installs the specified font stream.
            </summary>
            <param name="fontStream">The font stream.</param>
            <returns>the description of the font just loaded.</returns>
        </member>
        <member name="T:SixLabors.Fonts.IFontInstance">
            <summary>
            Represents a font instance, which is a set of glyphs under a specific style (regular, italic, bold etc)
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.Description">
            <summary>
            Gets the basic descripton of the font instance type.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.EmSize">
            <summary>
            Gets the EM size of the font
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.LineHeight">
            <summary>
            Gets the line height
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.Ascender">
            <summary>
            Gets the ascender
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.Descender">
            <summary>
            Gets the descender
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IFontInstance.LineGap">
            <summary>
            Gets the line gap
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IFontInstance.GetGlyph(System.Int32)">
            <summary>
            Gets a specific glyph
            </summary>
            <param name="codePoint">the code point to get the glyph from</param>
            <returns>The glyph to find.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IFontInstance.GetOffset(SixLabors.Fonts.GlyphInstance,SixLabors.Fonts.GlyphInstance)">
            <summary>
            Get the kerning offset that should be applied between 2 glyphs.
            </summary>
            <param name="glyph">the new glyph</param>
            <param name="previousGlyph">the previous glyph in the rendered font</param>
            <returns>Returns the offset that should be offset between the 2 glyphs</returns>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphRenderer">
            <summary>
            A surface that can have a glyph renered to it as a series of actions.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginFigure">
            <summary>
            Begins the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.MoveTo(System.Numerics.Vector2)">
            <summary>
            Sets a new start point to draw lines from
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.QuadraticBezierTo(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Draw a quadratic bezier curve connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.CubicBezierTo(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Draw a Cubics bezier curve connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="thirdControlPoint">The third control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.LineTo(System.Numerics.Vector2)">
            <summary>
            Draw a straight line connecting the previous point to <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndFigure">
            <summary>
            Ends the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndGlyph">
            <summary>
            Ends the glyph.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginGlyph(SixLabors.Fonts.FontRectangle,SixLabors.Fonts.GlyphRendererParameters)">
            <summary>
            Begins the glyph.
            </summary>
            <param name="bounds">The bounds the glyph will be rendered at and at what size.</param>
            <param name="paramaters">The set of paramaters that uniquely represents a version of a glyph in at particular font size, font family, font style and DPI.</param>
            <returns>Returns true if the glyph should be rendered othersie it returns false.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.EndText">
            <summary>
            Called once all glyphs have completed rendering
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRenderer.BeginText(SixLabors.Fonts.FontRectangle)">
            <summary>
            Called before any glyphs have been rendered.
            </summary>
            <param name="bounds">The bounds the text will be rendered at and at whats size.</param>
        </member>
        <member name="T:SixLabors.Fonts.IGlyphRendererExtensions">
            <summary>
            A surface that can have a glyph renered to it as a series of actions.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IGlyphRendererExtensions.Render(SixLabors.Fonts.IGlyphRenderer,System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="renderer">The target renderer surface.</param>
            <param name="text">The text.</param>
            <param name="options">The options.</param>
            <returns>Returns the orginonal <paramref name="renderer"/></returns>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.rawStream">
            <summary>
            The raw stream containing the uncompressed image data.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
            <remarks>
            If the entity is disposed, it must not be disposed a second
            time. The isDisposed field is set the first time the entity
            is disposed. If the isDisposed field is true, then the Dispose()
            method will not dispose again. This help not to prolong the entity's
            life in the Garbage Collector.
            </remarks>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.crcread">
            <summary>
            The read crc data.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.IO.ZlibInflateStream.deflateStream">
            <summary>
            The stream responsible for decompressing the input stream.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.IO.ZlibInflateStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.Exception">
            Thrown if the compression method is incorrect.
            </exception>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:SixLabors.Fonts.IO.ZlibInflateStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Fonts.IO.ZlibInflateStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Fonts.IReadOnlyFontCollection">
            <summary>
            A readonly collection of fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.IReadOnlyFontCollection.Families">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> objects associated with this <see cref="T:SixLabors.Fonts.FontCollection"/> in the invariant culture.
            </summary>
            <value>
            The families.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.FamiliesByCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> objects associated with this <see cref="T:SixLabors.Fonts.FontCollection"/>.
            </summary>
            <param name="culture">The culture to use while getting the family name from the installed set of fonts.</param>
            <returns>The set of fonts families using the fonts culture aware font name</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.Find(System.String,System.Globalization.CultureInfo)">
            <summary>
            Finds the specified font family.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="culture">The culture to use while getting the family name from the installed set of fonts.</param>
            <returns>The family if installed otherwise throws <see cref="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.TryFind(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <summary>
            Finds the specified font family.
            </summary>
            <param name="fontFamily">The font family to find.</param>
            <param name="culture">The culture to use while getting the family name from the installed set of fonts.</param>
            <param name="family">The found family.</param>
            <returns>true if a font of that family has been installed into the font collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.Find(System.String)">
            <summary>
            Finds the specified font family using the invariant culture font family name.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>The family if installed otherwise throws <see cref="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadOnlyFontCollection.TryFind(System.String,SixLabors.Fonts.FontFamily@)">
            <summary>
            Finds the specified font family using the invariant culture font family name.
            </summary>
            <param name="fontFamily">The font family to find.</param>
            <param name="family">The found family.</param>
            <returns>true if a font of that family has been installed into the font collection.</returns>
        </member>
        <member name="T:SixLabors.Fonts.IReadonlyFontCollectionExtensions">
            <summary>
            A readonly collection of fonts.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.IReadonlyFontCollectionExtensions.CreateFont(SixLabors.Fonts.IReadOnlyFontCollection,System.String,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="collection">The the ont collection to retrieve the font family from.</param>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <returns>The font for the representing the configured options.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadonlyFontCollectionExtensions.CreateFont(SixLabors.Fonts.IReadOnlyFontCollection,System.String,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="collection">The the ont collection to retrieve the font family from.</param>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <returns>The font for the representing the configured options.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadonlyFontCollectionExtensions.CreateFont(SixLabors.Fonts.IReadOnlyFontCollection,System.String,System.Globalization.CultureInfo,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="collection">The the ont collection to retrieve the font family from.</param>
            <param name="fontFamily">The family.</param>
            <param name="culture">The culture of the retuend font family</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <returns>The font for the representing the configured options.</returns>
        </member>
        <member name="M:SixLabors.Fonts.IReadonlyFontCollectionExtensions.CreateFont(SixLabors.Fonts.IReadOnlyFontCollection,System.String,System.Globalization.CultureInfo,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="collection">The the ont collection to retrieve the font family from.</param>
            <param name="fontFamily">The family.</param>
            <param name="culture">The culture of the retuend font family</param>
            <param name="size">The size.</param>
            <returns>The font for the representing the configured options.</returns>
        </member>
        <member name="T:SixLabors.Fonts.RendererOptions">
            <summary>
            The font style to render onto a peice of text.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="dpi">The dpi.</param>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="dpiX">The X dpi.</param>
            <param name="dpiY">The Y dpi.</param>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="origin">The origin location.</param>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font,System.Single,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="dpi">The dpi.</param>
            <param name="origin">The origin location.</param>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.#ctor(SixLabors.Fonts.Font,System.Single,System.Single,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.RendererOptions"/> class.
            </summary>
            <param name="font">The font.</param>
            <param name="dpiX">The X dpi.</param>
            <param name="dpiY">The Y dpi.</param>
            <param name="origin">The origin location.</param>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.Font">
            <summary>
            Gets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.TabWidth">
            <summary>
            Gets or sets the width of the tab.
            </summary>
            <value>
            The width of the tab.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.ApplyKerning">
            <summary>
            Gets or sets a value indicating whether [apply kerning].
            </summary>
            <value>
              <c>true</c> if [apply kerning]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.DpiX">
            <summary>
            Gets or sets the the current X DPI to render/measure the text at.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.DpiY">
            <summary>
            Gets or sets the the current Ys DPI to render/measure the text at.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.FallbackFontFamilies">
            <summary>
            Gets or sets the collection of Fallback fontfamiles to try and use when enspecific glyph is missing.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.WrappingWidth">
            <summary>
            Gets or sets the width relative to the current DPI at which text will automatically wrap onto a newline
            </summary>
            <value>
                if value is -1 then wrapping is disabled.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.HorizontalAlignment">
            <summary>
            Gets or sets the Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.VerticalAlignment">
            <summary>
            Gets or sets the Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.Origin">
            <summary>
            Gets or sets the rendering origin.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.RendererOptions.ColorFontSupport">
            <summary>
            Gets or sets a value indicating whether we enable various color font formats.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.RendererOptions.GetStyle(System.Int32,System.Int32)">
            <summary>
            Gets the style. In derived classes this could switchout to different fonts mid stream
            </summary>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <returns>
            The Font style that applies to a region of text.
            </returns>
        </member>
        <member name="T:SixLabors.Fonts.SystemFontCollection">
            <summary>
            Provides a collection of fonts.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.SystemFontCollection.standardFontLocations">
            <summary>
            Gets the default set of locations we probe for System Fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.SystemFontCollection.Families">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> objects associated with this <see cref="T:SixLabors.Fonts.FontCollection"/>.
            </summary>
            <value>
            The families.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.Find(System.String)">
            <inheritdocs />
        </member>
        <member name="M:SixLabors.Fonts.SystemFontCollection.TryFind(System.String,SixLabors.Fonts.FontFamily@)">
            <inheritdocs />
        </member>
        <member name="T:SixLabors.Fonts.SystemFonts">
            <summary>
            Provides a collection of fonts.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.SystemFonts.Collection">
            <summary>
            Gets the collection containing the globaly installled system fonts.
            </summary>
            <value>
            The system fonts.
            </value>
        </member>
        <member name="P:SixLabors.Fonts.SystemFonts.Families">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/>s installed on current system.
            </summary>
            <value>
            The families.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.Find(System.String)">
            <summary>
            Finds the specified font family from the system font store.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>The found family.</returns>
            <exception cref="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException">Thrown when the font family is not found.</exception>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.TryFind(System.String,SixLabors.Fonts.FontFamily@)">
            <summary>
            Finds the specified font family from the system font store.
            </summary>
            <param name="fontFamily">The font family to find.</param>
            <param name="family">The found family.</param>
            <returns>True if a font of that family has been installed into the font collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Single,SixLabors.Fonts.FontStyle)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family.
            </summary>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <returns>Returns instance of the <see cref="T:SixLabors.Fonts.Font"/> from the current collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.CreateFont(System.String,System.Single)">
            <summary>
            Create a new instance of the <see cref="T:SixLabors.Fonts.Font"/> for the named font family with regular styling.
            </summary>
            <param name="fontFamily">The family.</param>
            <param name="size">The size.</param>
            <returns>Returns instance of the <see cref="T:SixLabors.Fonts.Font"/> from the current collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.FamiliesByCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the collection of <see cref="T:SixLabors.Fonts.FontFamily"/> objects associated with this <see cref="T:SixLabors.Fonts.FontCollection"/> in the current threads culture.
            </summary>
            <param name="culture">The culture to find the list of font familes for.</param>
            <returns>The set of fonts families using the fonts culture aware font name</returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.Find(System.String,System.Globalization.CultureInfo)">
            <summary>
            Finds the specified font family.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="culture">The culture to find the font from of font family for.</param>
            <returns>The family if installed otherwise throws <see cref="T:SixLabors.Fonts.Exceptions.FontFamilyNotFoundException"/></returns>
        </member>
        <member name="M:SixLabors.Fonts.SystemFonts.TryFind(System.String,System.Globalization.CultureInfo,SixLabors.Fonts.FontFamily@)">
            <summary>
            Finds the specified font family.
            </summary>
            <param name="fontFamily">The font family to find.</param>
            <param name="culture">The culture to find the font from of font family for.</param>
            <param name="family">The found family.</param>
            <returns>true if a font of that family has been installed into the font collection.</returns>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.Id(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="M:SixLabors.Fonts.Tables.General.NameTable.FontSubFamilyName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="T:SixLabors.Fonts.Tables.TtcHeader">
            <summary>
            Represents a font collection header (for .ttc font follections).
            A font collection contains one or more fonts where typically the glyf table is shared by multiple fonts to save space,
            but other tables are not.
            Each font in the collection has its own set of tables.
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.TtcHeader.TtcTag">
            <summary>
            Gets the tag, should be "ttcf".
            </summary>
        </member>
        <member name="P:SixLabors.Fonts.Tables.TtcHeader.OffsetTable">
            <summary>
            Gets the array of offsets to the OffsetTable of each font. Use <see cref="T:SixLabors.Fonts.FontReader"/> for each font.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.TextLayout">
            <summary>
            Encapsulated logic or laying out text.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextLayout.GenerateLayout(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Generates the layout.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>A collection of layout that describe all thats needed to measure or render a series of glyphs.</returns>
        </member>
        <member name="T:SixLabors.Fonts.TextMeasurer">
            <summary>
            Encapulated logic for laying out and measuring text.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.Measure(System.String,SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.Measure(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.MeasureBounds(System.String,SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.MeasureBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TryMeasureCharacterBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions,SixLabors.Fonts.GlyphMetric[]@)">
            <summary>
            Measures the character bounds of the text. For each control character the list contains a <c>null</c> element.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <param name="characterBounds">The list of character bounds of the text if it was to be rendered.</param>
            <returns>Whether any of the characters had non-empty bounds.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TextMeasurerInt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.TextMeasurer.TextMeasurerInt"/> class.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TextMeasurerInt.MeasureBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TextMeasurerInt.TryMeasureCharacterBounds(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions,SixLabors.Fonts.GlyphMetric[]@)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <param name="characterBounds">The character bounds list.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="M:SixLabors.Fonts.TextMeasurer.TextMeasurerInt.Measure(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
            <returns>The size of the text if it was to be rendered.</returns>
        </member>
        <member name="T:SixLabors.Fonts.TextRenderer">
            <summary>
            Encapulated logic for laying out and then rendering text to a <see cref="T:SixLabors.Fonts.IGlyphRenderer"/> surface.
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.#ctor(SixLabors.Fonts.IGlyphRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Fonts.TextRenderer"/> class.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderTextTo(SixLabors.Fonts.IGlyphRenderer,System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Renders the text to the <paramref name="renderer"/>.
            </summary>
            <param name="renderer">The target renderer.</param>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderTextTo(SixLabors.Fonts.IGlyphRenderer,System.String,SixLabors.Fonts.RendererOptions)">
            <summary>
            Renders the text to the <paramref name="renderer"/>.
            </summary>
            <param name="renderer">The target renderer.</param>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderText(System.String,SixLabors.Fonts.RendererOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="M:SixLabors.Fonts.TextRenderer.RenderText(System.ReadOnlySpan{System.Char},SixLabors.Fonts.RendererOptions)">
            <summary>
            Renders the text.
            </summary>
            <param name="text">The text.</param>
            <param name="options">The style.</param>
        </member>
        <member name="T:SixLabors.Fonts.Utilities.EncodingIDExtensions">
            <summary>
            Converts encoding ID to TextEncoding
            </summary>
        </member>
        <member name="M:SixLabors.Fonts.Utilities.EncodingIDExtensions.AsEncoding(SixLabors.Fonts.WellKnownIds.EncodingIDs)">
            <summary>
            Converts encoding ID to TextEncoding
            </summary>
            <param name="id">The identifier.</param>
            <returns>the encoding for this encoding ID</returns>
        </member>
        <member name="T:SixLabors.Fonts.VerticalAlignment">
            <summary>
            Vertial alignment modes.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Top">
            <summary>
            Aligns downward from the top.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Center">
            <summary>
            Aligns text up and down from the middle.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.VerticalAlignment.Bottom">
            <summary>
            Aligns text upwards from the bottom
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.EncodingIDs">
            <summary>
            Encoding IDS
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode1">
            <summary>
            Unicode 1.0 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode11">
            <summary>
            Unicode 1.1 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.ISO10646">
            <summary>
            ISO/IEC 10646 semantics
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode2">
            <summary>
            Unicode 2.0 and onwards semantics, Unicode BMP only (cmap subtable formats 0, 4, 6).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.Unicode2Plus">
            <summary>
            Unicode 2.0 and onwards semantics, Unicode full repertoire (cmap subtable formats 0, 4, 6, 10, 12).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.UnicodeVariationSequences">
            <summary>
            Unicode Variation Sequences (cmap subtable format 14).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.EncodingIDs.UnicodeFull">
            <summary>
            Unicode full repertoire (cmap subtable formats 0, 4, 6, 10, 12, 13)
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.NameIds">
            <summary>
            Common name ids
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.CopyrightNotice">
            <summary>
            The copyright notice
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.FontFamilyName">
            <summary>
            The font family name; Up to four fonts can share the Font Family name, forming a font style linking group (regular, italic, bold, bold italic — as defined by OS/2.fsSelection bit settings).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.FontSubfamilyName">
            <summary>
            The font subfamily name; The Font Subfamily name distinguishes the font in a group with the same Font Family name (name ID 1). This is assumed to address style (italic, oblique) and weight (light, bold, black, etc.). A font with no particular differences in weight or style (e.g. medium weight, not italic and fsSelection bit 6 set) should have the string “Regular” stored in this position.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.UniqueFontID">
            <summary>
            The unique font identifier
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.FullFontName">
            <summary>
            The full font name; a combination of strings 1 and 2, or a similar human-readable variant. If string 2 is "Regular", it is sometimes omitted from name ID 4.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.Version">
            <summary>
            Version string. Should begin with the syntax 'Version &lt;number&gt;.&lt;number>' (upper case, lower case, or mixed, with a space between “Version” and the number).
            The string must contain a version number of the following form: one or more digits (0-9) of value less than 65,535, followed by a period, followed by one or more digits of value less than 65,535. Any character other than a digit will terminate the minor number. A character such as “;” is helpful to separate different pieces of version information.
            The first such match in the string can be used by installation software to compare font versions. Note that some installers may require the string to start with “Version ”, followed by a version number as above.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.PostscriptName">
            <summary>
            Postscript name for the font; Name ID 6 specifies a string which is used to invoke a PostScript language font that corresponds to this OpenType font. When translated to ASCII, the name string must be no longer than 63 characters and restricted to the printable ASCII subset, codes 33 to 126, except for the 10 characters '[', ']', '(', ')', '{', '}', '&lt;', '&gt;', '/', '%'.
            In a CFF OpenType font, there is no requirement that this name be the same as the font name in the CFF’s Name INDEX. Thus, the same CFF may be shared among multiple font components in a Font Collection. See the 'name' table section of Recommendations for OpenType fonts "" for additional information.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.Trademark">
            <summary>
            Trademark; this is used to save any trademark notice/information for this font. Such information should be based on legal advice. This is distinctly separate from the copyright.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.Manufacturer">
            <summary>
            The manufacturer
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.Designer">
            <summary>
            Designer; name of the designer of the typeface.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.Description">
            <summary>
            Description; description of the typeface. Can contain revision information, usage recommendations, history, features, etc.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.VendorUrl">
            <summary>
            URL Vendor; URL of font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.DesignerUrl">
            <summary>
            URL Designer; URL of typeface designer (with protocol, e.g., http://, ftp://).
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.LicenseDescription">
            <summary>
            License Description; description of how the font may be legally used, or different example scenarios for licensed use. This field should be written in plain language, not legalese.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.LicenseInfoUrl">
            <summary>
            License Info URL; URL where additional licensing information can be found.
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.TypographicFamilyName">
            <summary>
            Typographic Family name: The typographic family grouping doesn't impose any constraints on the number of faces within it, in contrast with the 4-style family grouping (ID 1), which is present both for historical reasons and to express style linking groups. If name ID 16 is absent, then name ID 1 is considered to be the typographic family name. (In earlier versions of the specification, name ID 16 was known as "Preferred Family".)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.TypographicSubfamilyName">
            <summary>
            Typographic Subfamily name: This allows font designers to specify a subfamily name within the typographic family grouping. This string must be unique within a particular typographic family. If it is absent, then name ID 2 is considered to be the typographic subfamily name. (In earlier versions of the specification, name ID 17 was known as "Preferred Subfamily".)
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.NameIds.SampleText">
            <summary>
            Sample text; This can be the font name, or any other text that the designer thinks is the best sample to display the font in.
            </summary>
        </member>
        <member name="T:SixLabors.Fonts.WellKnownIds.PlatformIDs">
            <summary>
            platforms ids
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Unicode">
            <summary>
            Unicode platform
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Macintosh">
            <summary>
            Script manager code
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.ISO">
            <summary>
            [deprecated] ISO encoding
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Windows">
            <summary>
            Window encoding
            </summary>
        </member>
        <member name="F:SixLabors.Fonts.WellKnownIds.PlatformIDs.Custom">
            <summary>
            Custom platform
            </summary>
        </member>
        <member name="T:SixLabors.DebugGuard">
            <summary>
            Provides methods to protect against invalid parameters for a DEBUG build.
            </summary>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="T:SixLabors.Guard">
            <summary>
            Provides methods to protect against invalid parameters.
            </summary>
            <summary>
            Provides methods to protect against invalid parameters.
            </summary>
        </member>
        <member name="M:SixLabors.Guard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.Guard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.SByte,System.SByte,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Char,System.Char,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Single,System.Single,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Double,System.Double,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="T:SixLabors.ThrowHelper">
            <summary>
            Helper methods to throw exceptions
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentNullExceptionForNotNull(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> when <see cref="M:SixLabors.Guard.NotNull``1(``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentExceptionForNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:SixLabors.Guard.NotNullOrWhiteSpace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeLessThan``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeGreaterThan``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:SixLabors.Guard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeExceptionForMustBeSizedAtLeast(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentException">Thrown with <paramref name="message"/> and <paramref name="name"/>.</exception>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with <paramref name="name"/> and <paramref name="message"/>.</exception>
        </member>
        <member name="M:SixLabors.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with <paramref name="name"/> and <paramref name="message"/>.</exception>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.MathF">
            <summary>
            Provides single-precision floating point constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
            <remarks>MathF emulation on platforms that don't support it natively.</remarks>
        </member>
        <member name="F:System.MathF.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="M:System.MathF.Abs(System.Single)">
            <summary>
            Returns the absolute value of a single-precision floating-point number.
            </summary>
            <param name="f">
            A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.
            </param>
            <returns>
            A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.
            </returns>
        </member>
        <member name="M:System.MathF.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
            An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = y / x, where
            (x, y) is a point in the Cartesian plane. Observe the following: For (x, y) in
            quadrant 1, 0 &lt; θ &lt; π/2.For (x, y) in quadrant 2, π/2 &lt; θ≤π.For (x, y) in quadrant
            3, -π &lt; θ &lt; -π/2.For (x, y) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries
            of the quadrants, the return value is the following:If y is 0 and x is not negative,
            θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If
            y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If x or y is
            <see cref="F:System.Single.NaN"/>, or if x and y are either <see cref="F:System.Single.PositiveInfinity"/> or
            <see cref="F:System.Single.NegativeInfinity"/>, the method returns <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="M:System.MathF.Ceiling(System.Single)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>
            The smallest integral value that is greater than or equal to <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
        </member>
        <member name="M:System.MathF.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="f">An angle, measured in radians.</param>
            <returns>
            The cosine of <paramref name="f"/>. If <paramref name="f"/> is equal to <see cref="F:System.Float.NaN"/>, <see cref="F:System.Float.NegativeInfinity"/>,
            or <see cref="F:System.Float.PositiveInfinity"/>, this method returns <see cref="F:System.Float.NaN"/>.
            </returns>
        </member>
        <member name="M:System.MathF.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="f">A number specifying a power.</param>
            <returns>
            The number e raised to the power <paramref name="f" />.
            If <paramref name="f" /> equals <see cref="F:System.Single.NaN" /> or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            If <paramref name="f" /> equals <see cref="F:System.Single.NegativeInfinity" />, 0 is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Floor(System.Single)">
            <summary>
            Returns the largest integer less than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="f">A single-precision floating-point number. </param>
            <returns>
            The largest integer less than or equal to <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
            <returns>
            Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
            If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are
            equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
            <returns>
            Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
            If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal
            to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Pow(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A single-precision floating-point number to be raised to a power. </param>
            <param name="y">A single-precision floating-point number that specifies a power. </param>
            <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
        </member>
        <member name="M:System.MathF.Round(System.Single)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value.
            </summary>
            <param name="f">A single-precision floating-point number to be rounded.</param>
            <returns>
            The integer nearest <paramref name="f" />.
            If the fractional component of <paramref name="f" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
        </member>
        <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integer.
            A parameter specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="f">A single-precision floating-point number to be rounded. </param>
            <param name="mode">Specification for how to round <paramref name="f" /> if it is midway between two other numbers.</param>
            <returns>
            The integer nearest <paramref name="f" />. If <paramref name="f" /> is halfway between two integers, one of which is even
            and the other odd, then <paramref name="mode" /> determines which of the two is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</exception>
        </member>
        <member name="M:System.MathF.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="f">An angle, measured in radians.</param>
            <returns>
            The sine of <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, this method returns <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:System.MathF.Sqrt(System.Single)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="f">The number whose square root is to be found.</param>
            <returns>
            One of the values in the following table.
            <paramref name="f" /> parameter Return value Zero or positive The positive square root of <paramref name="f" />.
            Negative <see cref="F:System.Single.NaN" />Equals <see cref="F:System.Single.NaN" />
            <see cref="F:System.Single.NaN" />Equals <see cref="F:System.Single.PositiveInfinity" />
            <see cref="F:System.Single.PositiveInfinity" />.
            </returns>
        </member>
    </members>
</doc>
